name: Build & Release Latest Kernel
on:
  schedule:
    - cron: '0 0 1 * *' # Run once a month
  workflow_dispatch:
permissions:
  contents: write
  issues: write
  pull-requests: write
  deployments: write

jobs:
  kver-checks:
    runs-on: ubuntu-latest
    outputs:
      latest_release: ${{ steps.latest_release.outputs.release }}
      latest_kernel: ${{ steps.versions.outputs.latest_kernel }}
    steps:
      - name: Checkout TKT
        uses: actions/checkout@v4
      - name: Get latest kernel version
        id: versions
        run: |
          get_latest_kernel() {
            git -c 'versionsort.suffix=-' \
            ls-remote --exit-code --refs --sort='version:refname' --tags https://github.com/torvalds/linux.git '*.*' \
            | cut --delimiter='/' --fields=3 | grep "$1" | tail -n 1
          }
          grep "_current_kernels=(" kconfigs/prepare > current_kernels.txt
          source current_kernels.txt
          latest_kernel=`get_latest_kernel "${_current_kernels[0]}"`
          if [[ "$latest_kernel" =~ "rc" ]]
          then
            latest_kernel=`get_latest_kernel "${_current_kernels[1]}"`
          fi
          echo "latest_kernel=$latest_kernel" >> $GITHUB_OUTPUT

  build:
    needs: [kver-checks]
    if: needs.kver-checks.outputs.latest_kernel != needs.kver-checks.outputs.latest_release
    strategy:
      fail-fast: false
      matrix:
        _cpusched: [eevdf, bore]
        compiler: [gcc, llvm]
        os: [arch, debian, fedora, slackware, suse]
    uses: ./.github/workflows/builder-dispatcher.yml
    with:
      _cpusched: ${{ matrix._cpusched }}
      compiler: ${{ matrix.compiler }}
      os: ${{ matrix.os }}
    secrets:
      CACHIX_AUTH_TOKEN: "${{secrets.CACHIX_AUTH_TOKEN}}"

  make-release:
    runs-on: ubuntu-latest
    needs:
      - kver-checks
      - build
    if: needs.build.result == 'success' && github.ref_name == 'main'
    steps:
      - name: Checkout TKT
        uses: actions/checkout@v4

      # Download all artifacts from build jobs
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release-artifacts

      # Find all tarballs and release them
      - name: Make new release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          latest_kernel="${{ needs.kver-checks.outputs.latest_kernel }}"
          dynamic_tag="${latest_kernel}-tkt"
          files_list=$(find ./release-artifacts -type f -name '*.tar.gz' | paste -sd' ')
          release_notes="ðŸ”¥ **TKT ${dynamic_tag} â€” GHCI Prebuilt Kernels** ðŸ”¥

          This release includes **24 precompiled Linux kernel images**, built using the latest upstream kernel \`${latest_kernel}\`, configured with TKTâ€™s \`_kernel_on_diet\` mode for lightweight performance and minimal bloat.

          ðŸ”§ **What's included:**
          - ðŸ’» **Distros (and their derivitives):** Arch, Debian, Fedora, Slackware, SUSE, Ubuntu
          - ðŸ§  **Compilers:** GCC & LLVM/Clang
          - âš™ **Schedulers:** EEVDF & BORE
          - ðŸ§© **Total Builds:** 6 distros Ã— 2 compilers Ã— 2 schedulers = **24 unique kernel builds**

          ðŸ§ª **Note:** If you encounter system instability or hardware issues, consider rebuilding with \`_kernel_on_diet\` disabled for improved compatibility.

          ðŸš€ This is intended for power users, performance tuners, and minimalists who want a no-bullshit kernel built for responsiveness and control.

          Feedback, issues, or patches? [Open an issue](https://github.com/The-Kernel-Toolkit/TKT/issues)."

          gh release create "$dynamic_tag" $files_list --latest \
            --title "TKT ${dynamic_tag} â€” GHCI Prebuilt Diet Kernel" \
            --notes "$release_notes"
